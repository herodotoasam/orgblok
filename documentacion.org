* Tk puro
:PROPERTIES:
:URL:      https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm
:WGET_OPTIONS: --recursive -l 1
:ID:       e333f231-83aa-480c-a227-9e7b8b54ec7b
:ARCHIVED_AT: [[file:/home/hero/orgblok/data/e3/33f231-83aa-480c-a227-9e7b8b54ec7b/2016-11-06T19:41:57Z/][2016-11-06T19:41:57Z]]
:END:
* sqlite basico
:PROPERTIES:
:WGET_OPTIONS: --recursive -l 2
:URL:      http://sqlite.org/lang.html
:ID:       66d82183-6d35-4140-8324-38ad3da4276e
:ARCHIVED_AT: [[file:/home/hero/orgblok/data/66/d82183-6d35-4140-8324-38ad3da4276e/2016-11-06T19:48:22Z/][2016-11-06T19:48:22Z]]
:END:
* sqlite varios
** usar like en vez de = para evitar errores
tengo un campo numerico para una condicion 1 o 0
y resulta que no se porque a veces la edito por tablelist y me la pone
'1' y no 1, y si la condicion esta campo=1 no me lo toma, en cambio si
la condicion esta campo like 1 o campo like '1' es igual, en ambos
casos me lo toma a todo o sea a los que estan como 1 y los que estan
como '1'.
* database locked - problema sqlite3
no se porque me aparecio la base de datos bloqueda y quise
solucionarla sin tener que apelar al backup.
Funcionaba para select, funcionaba para pragma integrity check pero no
para vacuum ni para ningun movimiento dentro de la base.
Lo que hice fue dentro de sqlite en una terminal
.clone newrx.db y luego esa newrx la renombre como romitex.db y anduvo
perfecto
En las paginas de internet figuraba la solucion via .dump pero el dump
lo que hace es sacar como secuencia sql lo cual es un pain.
* bwidget
** usar minusculas en la busqueda -nocase
editar el /usr/share/tcltk/bwidget1.9.10/combobox.tcl
linea 877 agregar -nocase
#+BEGIN_EXAMPLE
set x [lsearch -nocase $values $text*]
#+END_EXAMPLE
** tuneados varios a bwidget.py
agregados varios a un bwidget que esta incluido en git o sea no hay
problema de perder esos cambios.

agregamos funcion clear para hacer compatible
#+BEGIN_EXAMPLE
 def clear(self):
        return self.tk.call(self._w, "clearvalue")
#+END_EXAMPLE
agregamos funcion setvalues para hacer compatible
#+BEGIN_EXAMPLE
def setvalues(self,values):
        self.configure(values=values,autocomplete=1)
#+END_EXAMPLE
agregamos funcion set para hacer compatible
#+BEGIN_EXAMPLE
    def set(self,value):
        lista = self.cget('values')
        ix = lista.index(value)
        self.setvalue('@'+str(ix))
#+END_EXAMPLE
** Notebook - raise command
propiedad que permite especificar un comando a ejecutar cada vez que
se abra una pagina, muy util para recalcular un tablelist.
#+BEGIN_EXAMPLE
st2 = notventas.insert(END,2,text='Ventas Pasadas',raisecmd=lambda:tblsventaspasadas.recalc())
st3 = notventas.insert(END,3,text='Ventas a Integrar',raisecmd=lambda:tblssmtpasados.recalc())
#+END_EXAMPLE
** imposibilidad de hacer funcionar un bind a Return
luego de perder mas o menos hora y media tratando de meter un bind a
<Return> dentro de las entrañas de bwidget no funciona, incluso no
aparece como bindeado, pero no creo que cause problema, pq se puede
acostumbrar uno facilmente al paso a traves en forma de tab.
* tablelist
** freezar columnas
para freezar columnas se usa la propiedad titlecolumns en el Tbls
#+BEGIN_EXAMPLE
tbleditar=Tbls(self.p4,con,width=160,height=36,scrollhor=1,titlecolumns=1)
#+END_EXAMPLE
ahi se pone la cantidad de columnas que se quiere freezar.
** tree
para usar tablelist tree es facilisimo
1. definir el tbls igual
2. usar el metodo llenartree en vez de llenar que es igual
#+BEGIN_EXAMPLE
 tblslotesrbos.llenatree(con,'select id,fecha,cobr from loterbos order by id desc')
#+END_EXAMPLE
.3 poner la propiedad expand command del tbls a una funcion que va a
ser llamada con el argumento tbls/row
#+BEGIN_EXAMPLE
tblslotesrbos['expandcommand']=loterbos_exp
def loterbos_exp(tbl,row):
            node=tblslotesrbos.getcell(row,0)
            sel = "select rbo from rbos where idloterbos=?"
            a=Datos(con,sel,node)
            a.llenatree(tblslotesrbos,row,0,bg='bisque',fg='black')
            if not a.cntrow:
                balloon(tblslotesrbos,"Este lote no tiene recibos",mode='nobind')
#+END_EXAMPLE
** delete row
para el proceso de borrado uno hace un body_bind con delete o
control-d 
#+BEGIN_EXAMPLE
def borroplanilla():
            idplanilla = tblsplanillasencrudo.getcell('active', 'id')
            borro = messagebox.askquestion('Borrar Planilla', '¿Borra la Planilla {}?'.format(idplanilla))
            if borro =='yes':
                con.execute('delete from planillas where id=?', (idplanilla,))
                con.commit()
                tblsplanillasencrudo.recalc()
 tblsplanillasencrudo = Tbls(st4,width=140,heigh=10,stripebg='DarkOrchid')
 tblsplanillasencrudo.pack(anchor=W)
 tblsplanillasencrudo.llenar(con,'select * from planillas order by id desc limit 500')
 tblsplanillasencrudo.body_bind('<Control-d>',lambda ev:borroplanilla())
#+END_EXAMPLE
como se ve en el ejemplo se salta un messagebox.askquestion que
contesta yes or no
mi gran bug era que yo ponia 
if borro:
etc
como si el resultado fuera pythoniano o sea logico, borro=1 si era si,
pero esto es tcl, y el resultado del messagebox es 'yes' nunca lo
habia descubierto pq debe ser que siempre que borre algo nunca me
arrepenti, pero ahora que le di no al querer borrar me lo borraba lo
mismo, entonces no servia la 
** edit bug tab
el edit end command entrega cuatro parametros tbl row col text que
siempre funcionaron, pero aca en tkinter el tbl es formato str y type
str aunque tiene la misma forma o nombre que el tablelist genuino que
tiene type objeto tbls y no se como transformar ese str que entrega
tablelist en el objeto que tiene los metodos getcells y demas y me da
errores como que un str no tiene el metodo getcell supongamos, y no se
puede hacer nada.
.140077220321600.140077216656184.f18.140077216131560.f1.140077120898944
.140077220321600.140077216656184.f18.140077216131560.f1.140077120898944
aunque se imprimen iguales a nivel type dan diferente uno es objeto
tbl otro es str.

* git
** stash/unstash changes
puede ser visto como guardar cambios momentaneos o que estamos
realizando y volver al estado original del ultimo commit. Me paso que
me habia olvidado de hacer pull ultimo commit de oficina y me largue a
hacer cambios y para evitar hacer merge los stashee e hice el pull,
luego los unstashee y listo en un segundo.
** branches
son ramas que uno puede hacer incluso subir al servidor para que uno
desarrolle ideas que puedan ser luego descartadas y cuando este uno
seguro hace merge o sea lo uno a la rama principal.
** push/pull
push es subir cambios a la central y pull y es traer los cambios a la
maquina de uno.
** stash
git stash
guardado rapido del trabajo en la pila
git stash list
veo los distintos guardados
git stash apply
aplica el ultimo stash a la rama activa
** merge 
git checkout master
con esto me voy a la rama original 
git merge rama-mergeada
y con esto queda incorporada lo mergeado a lo original
y meto luego con un commit si hace falta
con emacs corrigo los problemas de merge que surjan

* redes 
* instalacion de ubuntu nueva
** instalacion de tcl
** instalacion de python
* emacs (instalacion)
** .emacs
lo inclui con git en orgblock pero hay que actualizarlo a mano de vez
en cuando.
** archivos recientes y guardado de desktop
#+BEGIN_EXAMPLE
(desktop-save-mode 1)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
#+END_EXAMPLE
** instalar los modulos faltantes
org-bullets
ido-vertical-mode
con M-x package-install
** instalar magit 
para manejar git dentro de emacs
#+BEGIN_EXAMPLE
(global-set-key (kbd "C-x g") 'magit-status)
#+END_EXAMPLE
** amazaing colorscheme
instalar el colorscheme leuven que esta superbueno
** ag
siguiendo instrucciones de la documentacion
se instala el bin con apt install silver-ag o algo asi
y luego en melpa con M-x package install ag
y listo
** package-install no encuentra package
package-refresh-contents 
lee nuevamente las bases de datos de paquetes y soluciona el problema
que no existen los paquetes.


* super-emacs
tratar de incorporar algo de super-emacs dentro de .emacs
** theme material
** neotree 
* python virtualenv/elpy
python3 -m venv /path/to/new/virtual/environment
M-x elpy
M-x elpy-config
M-x pyvenv-activate[[https://elpy.readthedocs.io/en/latest/ide.html][
pagina documentacion de elpy]]
M-x company-mode enable
(add-hook 'after-init-hook 'global-company-mode) en .emacs para
tenerlo activado para todos los buffers al comienzo


* emacs basicos
** busqueda de texto - search
C-s/ C-r
** occur
ag y pide el string a buscar
luego el directorio y da la ventana de busqueM-s o y luego te pide la
regexp para buscar (dandote una opcion a veces por default) y te
muestra todas las ocurrencias de esa cadena (parecido a ag) pero en el
mismo archivo, creo que tiene mas opciones para estudiar luego. las
opciones quedan en un buffer o sea que es regrosso.

** evaluar fichero Python
Cc-Cl
pide el nombre del fichero y solo con poner f-tab ya accedo a fichaje
asi que es muy rapido
eso si solo admite tener un solo proceso, asi que antes de lanzar uno
cerrar el anterior.

** borrar palabra
 M-d te borra la palabra siguiente lo cual es muy eficiente, y con
 control retroceso te borra la ultima palabra.

** theme
solarized light
no solo por las fonts en org, sino pq se ve el resaltado cuando voy a
copiar sino tambien los parentesis.

** pdf-tools
con eso habilito a ver pdf dentro de emacs

* orgmode
** listas planas
empiezan con + - o numero seguido de punto
se agrega otro item con 
+ item
+ alt enter y con
+ [ ] shift alt enter se le agrega checkbox
** checkboxs 
en listas planas con shift - alt - enter
poniendo la cookies [%] o [/] en cualquier parte del outline calcula
los checkboxs interiores
** todos states por files
#+TODO: TODO(t) | DONE(d!) CANCELED(c@)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
** sparse tree
muy buena funcion!!!
C-c // busco y me entrega abiertito y todo los que coinciden con la busqueda.
* emacs ultimos
** register
| C-x r space | point-to-register | F5 |
| C-x r j     | jump-to-register  | F6 |
|             |                   |    |
muy bueno para establecer marcas y volver a ellas F5 y F6 son los
atajos globales que hice
** indentacion
marcar una region y luego
Cx Tab y ahi da la opcion a mover la region entera con left/right/ o
Sleft o Sright
** search at symbol
con Cs-Cw buscamos la palabra del cursor y luego avanzamos con Cs o Cr
como es habitual
** historial en yank
una vez hecho un yank C-y haciendo M-y o CY vamos atras o adelante en
los yanks-rings.
** version control
| C-x vv | git commit        |
| C-x vP | git push          |
| C-x v+ | git pull          |
| c-x v= | git diff          |
| C-x vd | dired             |
| C-x vD | git diff en dired |
|        |                   |
muy buena la secuencia ver lo que hay de diferencia luego commit y
luego push.
de ahi creo que lo mejor para orgblock es el vD que te hace ver las
diff globales o bien vd y procesar de una, pq vv es para un solo archivo.
** comment region
*** region entera coment/descoment
 M-;
*** escribiendo un comentario para seguir con coment
M-j  corta linea y agrega comentario

** projectile
para activarlo en un file del project hacer
Mx- projectile-mode

| Cc- p S | save all project buffers |
| Cc- p k | kill all project buffers |
|         |                          |
** neotree
M-x neotree
| H     | toggle hidden archivos |
| n/p   | next/previous          |
| Cc Cp | copy node              |
| Cc Cd | delete node            |
| q     |   quit                 |
** yasnippets
*** creacion de snippets
1. poner textual lo que queremos que salga
2. campos van con $1 $2 $3 etc
3. salvo el $0 que es el ultimo
4. Y si hay un valor por default lo ponemos: ${3:valor-default} ej ${3:self}
5. si repetimos un campo es  mirror o sea tiene el mismo valor $2 $3  $2
6. para terminar C-C




* fichaje.py
** mostrar cuenta con doble click
hacer un bind con la funcion self.muestracuentas(idcliente)
** 

* jabbed- mensajeria
** obtener una id jabber
p.e. en jabjab.de
** usar un cliente como jaxim o pigdin
* wget
wget -vrpk --
| v | verbose                      |
| r | recursive                    |
| l | --level=3 nivel de recursion |
| k | convierte link locales       |
|   |                              |
* documentacion a mano en emacs
** alternativa eww
tratar de bajar el sitio con wget o mejor directamente empacado de la
pagina como lo entrega gnu-emacs o python y luego con
eww-open-file
abro el index que luego tengo bookmarkeado
** alternativa pdf
con los pdf-tools instalado directamente abro el pdf como un archivo
mas que bajo de la documentacion de las paginas y lo tengo para buscar
mejor que con herramientas propias de pdf, pq tenes el pdf-occur que
te entrega las lineas que contienen lo que buscas y dentro de ese
buffer podes hacer busquedas con c-s y podes ir a la seccion, y tmb el
pdf es navegable y el renderizado es veloz, manejaba el python library
de dos mil paginas velozmente.
Teniendo eso adentro de emacs podes trabajar mas rapido que si tenes
que buscar la web.
* error en apt install
    No se pudo bloquear /var/lib/dpkg/lock – open (11: Recurso no disponible temporalmente)
    E: No se pudo bloquear el directorio de administración (/var/lib/dpkg/), ¿quizás haya algún otro proceso utilizándolo?

Y lo solucionamos de la siguiente forma:

Abriremos una terminar  y ejecutamos el siguiente comando para desbloquear /var/lib/dpkg/lock.

    $ sudo fuser -vki  /var/lib/dpkg/lock

Las opciones utilizadas en el comando sirven para:

    -v activa el modo verbose, para los que nos gusta ver en todo momento lo que está haciendo.
    -k mata el proceso que mantiene el fichero ocupado.
    -i pide confirmación para matar al proceso.

También recomiendan eliminar el fichero en cuestión.

    $ sudo rm -f /var/lib/dpkg/lock

Una vez terminado con el bloqueo, ejecutamos el siguiente comando para reparar los posibles paquetes rotos.

    $ sudo dpkg --configure -a

Terminado este último paso, ya podemos volver a instalar. Acaba la instalación ejecutamos el siguiente comando para eliminar paquetes que ya no sirvan o se hayan quedado “colgando” y
listo.

    $ sudo apt-get autoremove
* disable touchpad
lo cual es muy molesto mas cuando usamos raton (o sea siempre)
averiguamos con
$ xinput list
⎡ Virtual core pointer                          id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
⎜   ↳ SynPS/2 Synaptics TouchPad                id=12   [slave  pointer  (2)]
⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    ↳ Power Button                              id=6    [slave  keyboard (3)]
    ↳ Video Bus                                 id=7    [slave  keyboard (3)]
    ↳ Power Button                              id=8    [slave  keyboard (3)]
    ↳ Sleep Button                              id=9    [slave  keyboard (3)]
    ↳ Laptop_Integrated_Webcam_1.3M             id=10   [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard              id=11   [slave  keyboard (3)]
    ↳ Dell WMI hotkeys                          id=13   [slave
keyboard (3)]

ahi averiguamos que el id del TouchPad 

xinput --disable 12
xinput --enable  12

Las he mapeado a Win 1 y Win 2
