* doc Vue
** form-inline
esta class en boostrap para los formularios permite que el formulario
sea horizontal, aunque no le pude poner label y no quedarian bien, por
eso use placeholders.
** @submit.prevent se puede usar solo
no es necesario que el modificador prevent sea usado con una funcion
disparada, en efecto en el form lo uso solo y busco el efecto de
preventDefault().
** form-control
ya se sabe es la clase de boostrap para que los input queden mas bonitos
** validateCargarPlanilla y validatePasarPago
use esas funciones previas para hacer las validaciones, una vez hechas
recien pase a la funcion propiamente dicha para no recargar.
** button type="button"
aparentemente el button type="submit" me hacia recargar el formulario
a pesar de estar con prevent, al ponerlo type button dejo de ser
problematico, pienso que tambien se podria usar un input type button.
** @focus="cuenta='';verInputsPagos=false"
uso el event focus para poner el campo vacio y de paso cambiar el
valor una variable
** verInputsPagos como variable que controlara varios v-if
para controlar la visibilidad de varios inputs y buttons con v-if creo
esta variable
** para que los buttons esten horizontales cree la class floated
float:left (saque de internet). y para cuidar que no se pasen de fila
uso el div/row
** se pueden encadenar varias funciones en un event
separados con punto y coma se pusieron distintas funciones o expresiones
** se puede establecer delimitadores especiales
delimiters:['|','|'],
en este caso puedo usar pipes y no tener problemas con jinja2
** los badges se les puede dar mas tamaño en h2/h3
depende el h en donde embebamos el span del badge es el tamaño.
** el atributo size vigila el ancho de un input
util para dibujar mejor las grillas
** v-bind sirve para vincular a nivel atributos
el ejemplo mejor es el de importe+recargo en el total, haciendo
:valor="importe+recargo" tenemos todo resuelto.
** en tablas asignar una clase con un ternario
p.e. :class pago[10]>0='normal':'cancelada'
lo que si tener en cuenta que el nombre de la clase tiene que ir entre
comillas simple sino no va a andar, ya que todo va a estar entre
comillas dobles. 
** en tablas incluir un button es muy directo
ya que se lo incluye dentro de un td, se le da la class, y se le
asigna un click event, relacionado con una variable relativa al valor
del row p.e. @click="borrarPago(pago[0])
** libreria Vue Toasted para notificaciones.
agregar el cdn  y antes de la app vue.
Vue.use(Toasted)
y luego donde queramos el toasted:
let toast = this.$toasted.error("Complete los campos faltantes", { 
                theme: "outline", 
                position: "top-right", 
                duration : 3000,
                fullWidth: true,
            });
** en general no olvidarse del this
cuando Vue te dice que no conoce una variable o funcion, posiblemente
la estemos poniendo sin el this adelante. 
* Python/flask
** transformacion de datos cuando viene un POST de axios
los datos vienen en formato bytearray que es un formato que se ve como
diccionario de python con una b adelante pero que no se puede acceder
por claves.
Buscando encontre esto:

import ast
--
dict = ast.literal_eval(request.data.decode("UTF-8"))

o sea el request.data que es lo que entra, primero se decode con UTF y
luego eso pasa por la funcion ast.literal y se trasnforma en un dict
python y ahora podemos acceder a los campos con clave.

dict['idvta'] etc.
** enviar datos a javascript en formato json
de la repuesta de sqdict o sqonecolumn que obtengamos como es
habitual, hacemos un return con jsonify
return jsonify(planillas=planillas,clientes=clientes)

del otro lado lo reciben como 
res.data.planillas y res.data.clientes

importar jsonify
* dayjs
<script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
<script src="https://unpkg.com/dayjs@1.8.21/plugin/utc.js"></script>
<script>dayjs.extend(window.dayjs_plugin_utc)</script>
el plugin utc es para evitar un error que hace que por el utc la
conversion format de dayjs te la hace a un dia menos. la descubri con
los pmovto. 
entonces a la funcion hay que usarla dayjs.utc().format(...
* postgres
** pgtcl/migra contiene los migradores sqlite-pg
*** borra todos los trigger ya que se usa a partir de ahora trigger propios
*** borra y vuelve a definir la funcion gc
    alli se corrigio [2020-12-30 mié] una linea erronea en 
delete from cuotas where cuotas.idvta=$1;
    donde le agrego el where cuotas.idvta=$1 o sea que al generar un
gc de una cuenta especifica, no borre todo el contenido de cuotas como
hacia antes, sino cuando un cliente tiene dos cuentas se le muestra
una sola cuenta. 
*** ahora la base lite se genera por N° de idvta
lo cual es mas facil de mantener, si tuviera que actualizar lo
actualizo a ese numero nomas. Tambien limito la cantidad de calles
incluidas en lite.
** para subir la base lite a heroku
psql -f lite.sql -h ec2-3-95-87-221.compute-1.amazonaws.com -d daq6n3vvmrg79o -U ynpqvlqqsidhga -p 5432
** schema basico postgres
*** schema backupeado en mega y en drive
por seguridad y simplicidad el schema esta backupeado en esos dos
lugares mega/postgres y en drive/postgres/schemas 
*** pgmodeler
en la carpeta models de pgtcl (que esta giteada) hay un modelo hero
que es el modelo actual del schema. 
lo unico que pgmodeler usado desde debian me dio error, pero se podria
usar como base del schema, pero es una solucion mas complicada. 
* javascript
** clipboard
no existe una forma clara de hacerlo.
hay un execCommand("copy") pero que funciona sobre lo selected() de un
element
por eso una funcion que encontre en stackoverflow soluciona
genialmente el problema, crea un elemento dummy al que se le asigna el
texto que queremos pasar al portapapeles, y lo seleccionamos y le
aplicamos el metodo execComand y luego removemos el dummy, que a todo
esto no alcanza a verse. 
#+BEGIN_EXAMPLE
function textToClipboard (text) {
    var dummy = document.createElement("textarea");
    document.body.appendChild(dummy);
    dummy.value = text;
    dummy.select();
    document.execCommand("copy");
    document.body.removeChild(dummy);
}
#+END_EXAMPLE
luego se lo usa facilmente como cualquier funcion, y listo
** impresion en javascript desde flask SOLVED
el problema de imprimir desde flask. Una cosa es usar un link de flask
directo y otra es obtener la respuesta que te manda send_file y hacer
algo con ese raw.
Los lugares desde donde obtuve alguna idea fueron [[https://stackoverflow.com/questions/56546795/how-to-receive-files-in-javascript-sent-from-flask-using-send-file][How to receive files
in Javascript sent from Flask using send_file()]]
pero no logre hacerlo funcionar pq me daba el pdf vacio, buscando
casos en que les daba el pdf vacio consegui dar con 
[[https://stackoverflow.com/questions/21729451/pdf-blob-pop-up-window-not-showing-content][PDF Blob - Pop up window not showing content]]
y alli vi que la clave estaba en 


If you set { responseType: 'blob' }, no need to create Blob on your own. You can simply create url based with response content:

$http({
    url: "...",
    method: "POST",
    responseType: "blob"
}).then(function(response) {
    var fileURL = URL.createObjectURL(response.data);
    window.open(fileURL);
});

en el responseType: "blob"
entonces cambio el axios de get a post, pongo el responseType a blob
que funciona tal cual, y funciona perfecto, simplificando solo deje: 
let url = window.URL.createObjectURL(res.data);
        window.open(url) 
la creacion de una url con el res.data ya listo que me manda el axios
esta vez en formato blob, y el window open de esa url. para que me
muestre directamente en pantalla el pdf como yo queria.
