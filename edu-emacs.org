* Emacs maravillas
** undo/redo por regiones

Es muy comun que uno quiera deshacer algo antepasado pero no todo, y emacs te hace undos
sobre regiones, o sea resaltar el lugar donde esta el undo y al c-/

** M-y cicle yanks

o sea despues de un yank con c-y se puede usar m-y y te cicla los yank

* Emacs teoria
** Busqueda
*** Ms .

Con Ms . buscamos la palabra en la cual esta el cursor no importa si
esta el cursor en el medio al comienzo o donde. La resalta y luego nos
movemos con Cs/Cr

** Lower/Upper
*** Mu / Ml

Con dichos comandos voy poniendo mayusculas/minusculas y va avanzando
palabra a palabra

* Emacs requeridos
*** un theme que marque la fila a lo ancho. Antes lo tenia.
*** DONE como poner autofill siempre p.e. en org-mode
*** ver que funcione de nuevo highlight-mode
* Emacs vs Vim

[2016-09-28 mié]
No esta definida a hoy la batalla. Se que ha pasado poco tiempo y uno
no va a aprender todo en dos dias. Una cosa es entrar en produccion y
otra es mastering.
Y en el fondo creo que lo mejor es la produccion no la herramienta.
Incluso a hoy un poco se me cae la utilidad de org-mode. Parte pq
quedo en ese bache y parte por la forma en que se me hace complejo el
escrito y sin orden.
[2016-09-30 vie]
Hoy la batalla dio un giro inesperado. Desde anoche me volvi
rotundamente a vim. La idea es lograr un vim bien armonizado con un
control de plugin bien hecho y fundamentalmente con un .vimrc hecho de
cero.
Aunque parezca mentira trabajo con un .vimrc de hace varios años y
nunca lo revise. Entonces tiene parche sobre parche y al final no se
lo que tiene.
Lo que me llamo la atencion fue.
1. la rapidez
En realidad gvim abre en un segundo y esta listo. (Emacs puro tambien)
2. la facilidad real para editar
No puedo decir que no es rapido y facil, y tiene ciertas
caracteristicas que son utiles a la hora de trabajar (que no he
encontrado aun en emacs).

Al final me decidi en realidad por un resultado dividido:
a. Vim para programar
b. Emacs para org-mode
Total los dos son ultrarapidos y estan en todas las maquinas (no asi
atom que es un mastodonte en la tablet y no se puede instalar en una
i686).

Pero tambien creo que hay mejoras en el uso de vim que pueden hacerlo
muchisimo mas poderoso (que lo que yo lo estaba usando)
[2016-10-01 sáb]
Hoy puse en emacs evil, y parece que todo va muy rapido, al menos para
seguir usando org-mode y punto.

* Alt-x ingresar comandos
** list-colors-display

muestra todos los colores que se pueden conseguir y sus respectivos nombres o hexas

** linum line number mode
* Cortar/copiar/pegar
** Use CUA en menu

permite usar los clasicos Cx Cv Cc Cz de windows

** cortar y pegar en emacs

- cortar C-w
- pegar C-y (yank)
- copiar Alt-w

* Manejo de Buffers
** abrir archivo

C-x C-f excelente con autocompletacion

** guardar un buffer

C-x C-s

** eliminar un buffer

C-x k

* Movimiento dentro de un buffer
** Principio y final

C-Home Alt-<
C-End  Alt->

** Movimiento entre palabras

C-left/right

** Movimiento entre lineas

- C-n linea abajo
- C-p linea arriba
- C-a principio de linea
- C-e final de linea

* Seleccion de texto

con C-Space hacemos una marca luego nos movemos hasta el lugar deseado y podemos usar los
comandos copiar o cortar
C-x-h marca todo el buffer (el Ctrl-a de windows)

* Undo

C-/

* Borrado

C-k borra la linea desde la posicion hasta el final
Alt-d borra la palabra actual
Alt-Backspace borra la palabra anterior

* Abandonar la busqueda y volver adonde estabamos

C-s etc C-g

* Replace

Alt-% nos lleva a un replace (si hay algo seleccionado nos lo propone como default)
y nos pide con que queremos reemplazarlo
Luego tenemos la opcion  y / n /! que es todo

* Replace global

abrimos un dired y alli marcamos o desmarcamos los archivos que queremos procesar
- m mark
- u unmark
y con la tecla Q hacemos el reemplazo global que nos llevara por los archivos paso a paso con la opcion
y/n/! similar al replace local

* Busqueda

el comando de busqueda es asombroso. Busqueda incremental
C-s busca hacia abajo
C-r busca hacia arriba
si repetimos va a la siguiente palabra y se puede cambiar de direccion Cs Cs Cr

** Buscar la palabra bajo el cursor

C-s C-w

** Quedarnos con la busqueda

C-s etc RET

** busqueda de la palabra bajo el cursor (otra forma)

M-s .

** highlight busquedas
*** M-s h . highlight-symbol-at-point
*** M-s h l highlight-matching-regexp
*** M-s h r
*** M-s h p
** ag

Mx-ag RET default la palabra que esta bajo el cursor
podemos con Mp Mn ir arriba y abajo en el historial de busquedas
nos deja poner el directorio de busqueda y nos abre una ventana de
resultados que es linkeable. o sea toda una maravilla

** busqueda en los orgs que estan en agenda

verificar que todos los orgs esten incluidos en agenda
abrir agenda (usualmente C-})
con / tengo una busqueda multioccur de los archivos
y hay otras busquedas mas relativas a agenda con los todos y demas que
son menos relevantes .

** busqueda en org por sparse tree

C-c /
da muchas opciones pero nuevamente / brinda la opcion de buscar regexp
y da el resultado con los tree abiertos

* Quedarse en la unica ventana (maximizar)

C-x-1

tabla
| nombre       | direccion           | telefono |
| juan perez   | julio de vedia 3161 |  4776677 |
| julian lopez | orellano 89         |   457888 |
|              |                     |          |
|              |                     |          |
|              |                     |          |

ejemplo produciendo listas

+ item a
+ item b
  + subitem b1
  + subitem b2
    1)sub.subitem b2.1
  + subitem b3

* Split windows
** Horizontal

C-x-2

** Vertical

C-x-3

** Moverse a otra ventana

C-x-o

* spacemacs
** File navegacion
*** Nerd-tree

spa-f-t

dentro de el

| h | colapse un tree o ir al parent                |
| l | expand un directorio                          |
| j | next                                          |
| k | previus                                       |
| R | sobre un directorio - hacerlo root en el tree |
| K | ir al parent directorio                       |
| q | salir                                         |

opciones de apertura (donde)

| RET   | abre en la ultima activa windows |   |
| # RET | lo abre en la window numero #    |   |
| pipe  | split vertical                   |   |
| -     | split horizontal                 |   |

otras opciones dentro del Tree

| TAB | stretching el buffer (agranda)        |
| gr  | refresca                              |
| s   | toggle showing of hidden files        |
| c   | crea un node                          |
| d   | delete el node (archivo o directorio) |
| r   | rename el node                        |

** intentos para autocompletar con jedi

si no se puede hacer andar jedi la bocha la veo fea

- instalar jedi
- instalar virtualenv desde arch
- ejecutar jedi:install-server
- ejecutar jedi-mode

Eso produciria el jedi-mode enabled

** Entrada en modo de produccion con emacs

<2016-09-18 dom>
Este ha sido un domingo muy intenso debido a un ataque muy potente del virus
patetico diletante.
Comenzo el viernes o quizas el jueves con un vistazo a emacs, que me produjo
que el viernes perdiera un par de horas.
Y el finde entero estuvo destinado a la investigacion sobre la linea de trabajo
sobre el tema.
Con mucha frustracion porque no encontraba la forma de hacerlo funcionar.
Hasta que comence por la base con las fichitas de los comandos basicos.
Luego descubri org-mode.
Luego los videos que vi sobre org-mode donde alucine en la forma en que acabadamente
un tipo logro escribir tres libros sobre org que luego exporto a hlmt y/o pdf/latex.
Y alli mismo me puse a trabajar en org, bastante bien al principio pq es rapido
muy rapido y te muestra los resultados ahi mismo.
Anoche que caigo rendido de cansancio pq no habia dormido bien las dos noches anteriores
y en el proceso de la frustracion durante la noche concluyo que por mas que todo hubiera
sido una perdida de tiempo me quedaba el haber conocido a org-mode que podria solucionar
uno de los problemas de documentacion y base de conocimiento relativa a la programacion
que no he podido resolver en los ultimos tiempos (años) sin suerte, como muchas experiencias
que lei/vi en la web.
Pero hoy despues de renegar un monton y tres migrales (lamentablemente) puse en produccion
emacs para trabajar

*** puesta en produccion de emacs

Con spacemacs todo esta muy bueno pq es de configuracion simple y clara y tiene la
posibilidad de ponerle cientos de themes muy buenos, al menos el que estoy usando ahora.

*** spacemacs

lo bueno es que tenes vim casi con todos los comandos y la rapidez que te da lo que ya
sabes mas emacs y sus tres mil comandos y la posibilidad de programar abajo en lisp.

*** solucion al problema de autocomplecion

para ser realista la autocomplecion con jedi en vim lo enlentece muchisimo hasta la exasperacion
y en atom es muy intrusiva que tambien te exaspera pq te tapa lo que estas haciendo.
Es cierto que uno puede estar escribiendo una funcion de la que no recuerda los argumentos y
un poco te lo facilita pero tengo un workaround que es mucho mas rapido.
Tiene facilidades muy potentes para la busqueda, con asterisk sobre la palabra y / directamente
se abre helm y te muestra todas las ocurrencias en el proyecto desde donde podes ir al archivo original
y volver en dos segundos solo cuando queres.
Para asegurarte de que escribiste bien tambien sirve pq marca todas las ocurrencias.
Es decir que la forma de programar dependiendo de las autocompleciones puede ser una remora
y descubrir nuevas herramientas puede ser mas provechoso. Creo que helm es el alma de spacemacs y
una vez manejado bien puede darte un poder barbaro en pocos teclazos.

*** solucion a la ejecucion del script rapidamente

via-python es lento y no me permite cerrar el programa, la ventaja es que las salidas de error estan
linkeadas y se pueden acceder directamente al codigo.
via-shell es mas rapido pq hago spc-! y estoy en shell-helm ahi pongo python y luego el archivo, eso
toma 5 segundos la primera vez, y luego las siguientes veces spc-! y up RET.
y cierra igual que en la vida real

*** diferencias con atom y vim

| cualidad           | atom  | emacs            | vim         |
|--------------------+-------+------------------+-------------|
| delete linea       | c-s-k | dd               | dd          |
| duplicar linea     | c-s-d | yy-p             | yy-p        |
| guardar archivo    | c-s   | spc-fs           | :w          |
| buscar             | c-f   | * / */ spc s etc | /           |
| busqueda global    | c-F   | */ etc           | un quilombo |
| manejo de archivos | c-t   | integrado        | :Explore    |
|                    |       |                  |             |


| otros aspectos   | atom  | emacs  | vim        |
| distraccion      | mucha | media  | baja       |
| rapidez de carga | lento | rapido | muy rapido |
|                  |       |        |            |
vim te quita tiempo y acarrea frustracion queriendo instalar plugin para transformarlo
y nunca terminas en nada
atom tiene el sistema de paquetes y themes ahi mismo que te distrae un monton
y no funcionan 100% bien.
emacs tambien tiene la parafernalia de vim con sus plugin para hacer de todo
pero en este caso (hasta ahora) spacemacs es seamless y no requiere ni permite nada mas.

* tips encontrados en spacemacs-produciendo
*** Control-up/down para ir rapidamente entre lineas en blanco

muy util seria para navegar rapidamente no solo entre clases, sino entre definiciones
y partes de sectores densos.
Incluso si se pone el titulo del sector denso como comentario es facil transitarlo.

* DONE Emacs basicos :anki:
CLOSED: [2018-10-29 Mon 12:19]
- State "DONE"       from "TODO"       [2016-12-15 jue 13:39]
- State "DONE"       from "TODO"       [2016-11-12 sáb 23:07]
- State "DONE"       from "TODO"       [2016-10-31 lun 22:26]
:PROPERTIES:
:LAST_REPEAT: [2016-12-15 jue 13:39]
:END:

** basicos

| C-j         | jump new line desde donde esta sin respetar indentacion |
| C-o         | abre nueva linea                                        |
| RET         | abre nueva linea                                        |
|-------------+---------------------------------------------------------|
| C-n         | linea abajo                                             |
| C-p         | linea arriba                                            |
| C-a         | comienzo linea                                          |
| C-e         | final linea                                             |
|-------------+---------------------------------------------------------|
| C-f/b       | avanza retrocede un caracter                            |
| M-f/b       | adelante y atras una palabra                            |
|-------------+---------------------------------------------------------|
| M-<         | comienzo archivo                                        |
| M->         | final archivo                                           |
| M-g g       | go to line x                                            |
|-------------+---------------------------------------------------------|
| M-w         | copy                                                    |
| C-y         | yank                                                    |
| M-y         | cicla yanks                                             |
| C-w         | cut                                                     |
| C-/         | undo-redo                                               |
| C-x z       | repite ultimo comando zzzz repite sucesivamente         |
|-------------+---------------------------------------------------------|
| C-s         | busqueda adelante                                       |
| C-r         | busqueda atras                                          |
| M-%         | replace                                                 |
|-------------+---------------------------------------------------------|
| M-l/u       | lower-upper en avance desde ahi                         |
|-------------+---------------------------------------------------------|
| C-F/B       | marca y avanza presionando repetidamente                |
| C-spc       | comienza marca y luego flechas                          |
| C-x h       | select all                                              |
| C-P/N       | marca y avanza lineas desde alli                        |
|-------------+---------------------------------------------------------|
| M-d         | borra la palabra siguiente desde ahi                    |
| M-Del       | borra la palabra anterior desde ahi                     |
| M-Backspace | borra la palabra anterior                               |
| C-k         | borra la fila desde ahi                                 |
|             |                                                         |

** Dired

C-x- d abre dired y pide directorio o pattern
| n/p | next/previous file            |
| m/u | mark/unmark files for actions |
| Q   | replace global                |

** Comandos usables M-x

| linum              | numerar lineas este archivo |
| column-line-mode   | idem para columnas          |
| list-color-display | colores y sus nombres       |
| count-word         | lineas,words y caracteres   |
| hl-line-mode       | highlight la linea activa   |
|                    |                             |

** Python

| Cc-Cp | llama al interprete |
| Cc-Cc | evalua el script    |
| etags | etags *.py          |
| M-.   | busca por tags      |

** Buffers

| Cx-Cb | lista buffers   |
| Cx-b  | cambia a buffer |
| Cx-k  | kill buffers    |

* Emacs nuevos de la lectura
** hacer un solo windows C-x-1

Mouse-2 en modeline
C-Mouse-2 divide en dos windows.

** C-x left-right

buffer next/previous

** undo/redo

para dar vuelta el sentido de los undos hacer cualquier otro comando
p.e. C-f y eso interrumpe el undo y comienza para el otro lado

** C-x-C-b abre la lista de buffers

alli parecido a dired podemos poner entre otras cosas
| k | kill the buffer      |
| s | save the buffer      |
| x | procesar lo anterior |
|   |                      |

** buffer next/buffer previous

Mouse-1 previous
Mouse-3 next
en el nombre del buffer en mode-line
Esto hace innecesario el rebind hecho con M-n M-p

** ido-mode

verlo a esto que parece bomba

** Ctrl-Mouse-1 Buffer-Menu

clasificado por tipo de fichero
una bomba atomica
y lo descubri por casualidad

** Ctrl-Mouse-2 menu contextual

con algunas cosas

** Shift-Mouse-1 menu contextual

cambio de font entre otras

** occur

M-s o occur de una regexpr
interesantes opciones
r - rename occur buffer para dejarlo fijo sin importar si llamamos a
otros occur
Auto Ocurrence Display para navegar de una entre las partes.
Vendria a ser una ventanita mucho mejor que el F4 de vim, pero hay que
hacerla a mano. y con la profundidad que uno quiera

** tab search

M-. busqueda en tags en un archivo generado por etags. y te lleva al
file que sea. Util para ir a librerias.

* Hace falta
** una navegacion a ultimos cambios como en vim
* git

comandos basicos

** Cx vv

genera el commit. Abre una ventana al lado para poner el mensaje del
commit, con un titulo y una aclaracion pertinente.
Es importante explayarse en ambas cuestiones pq luego en el log
tenemos una especie de documentacion de la programacion.
Salimos de ahi con Cc.

** Cx vl

log tenemos el listado de los commit pero al ir de commit en commit
presionamos D en cualquiera y se abre una ventana con el diff
particular lo cual es una bocha para ver lo que hemos cambiado.

** Cx vd abre directorio

pide directorio y muestra los archivos que estan sin commit para
marcarlos, ahi hacemos commit ya sea con el icono, con el menu, o bien
con un teclazo que creo que es v
ahi pasamos al mismo de antes para escribir el header y cuerpo del
commit y Cc para commit y P hace push.

* TCL
** ejecutar el script de prueba

el clasico C-x que hacia en vim. lo logro facilmente con el menu Tcl
que me aparece mientras trabajo con Tcl.
Restart Tcl process with file (no tiene un atajo adaptado todavia) y
me aparece un file explorer donde elijo el archivo a ejecutar, que
esta resaltado el que estoy trabajando y enter y ya esta.

* jump to register

F5 point-to-register te pide una letra mostrandote las que estan
grabadas
F6 jump-to-register te pide una letra idem mostrandote las grabadas y
te lleva a ella.
Genialmente aparentemente persiste mas alla que cerremos el programa.
Lo que si si cerramos el buffer la marca nos dice que el buffer no
existe y la marca ya se pierde, o sea que al cerrar el buffer se borra
la marca.

* listas desordenadas

1) con + - *
2) M-RET agrego otro renglon
3) con S-Left ciclo tipos de bullets o C-c -
4) M-Left-Right promote/demote
5) M-Up-Down subo bajo el renglon
6) C-c * transforma una entrada en un titulo
7) C-c C-* transforma toda la lista en titulos sin tener que resaltarla
8) C-c ^ ordena la lista con un criterio que te da a eleccion.

* corrector ortografico

instalar aspell-es
luego M-$
es muy bueno mejor que el de google
lo use para una palabra rara pq estaba escribiendo un mail en gmail:
háganoslo y el puto gmail no me la corregía, abri el libreoffice y me
corregia igual que google y me desesperaba pq tenia que terminar el
trabajo y lo hice en emacs y me lo corrigio perfecto.
Asi pienso que es todo emacs para el que lo sabe usar, me imagino que
con el mail tambien.


* check-parens
cuando tenemos problemas en init.el ese comando nos puede salvar las
papas.

* ordenar los elementos de un heading en org-mode
C-c ^ eso abre un menu de multiples opciones en minuscula para asc y
mayusculas para desc.


* intento de jump en forma mas segura
en evil tengo C-o C-i pero no anda tan bien como en vim.
baje un paquete y keybindie A-o A-i y para setear F9. tiene la
ventaja/desventaja de que uno tiene que setear la marca manualmente.
* mejoras a ido
en lo posible. por empezar puse ido-vertical
* rapidez en el teclado
xset r rate 150 255
-- a ese radio es inusable en fedora
puse xset r rate 400 25
* reemplazo en multiples archivos
find-name-dired
dando el path y el wildcard que queremos
luego con t marcamos todos los archivos juntos
con Q hacemos reemplace
con Y aceptamos cambiar a todos juntos y finalmente
C-s s guardamos todo usando la opcion ! (all).
* consult M-s y alli veo las opciones
en especial MsMi y varias para ver
* embarck C-, y alli veo las opciones
en especial ir hacia la definicion
* lsp - space l  y de alli veo las opciones
* Ctrl X- TAB indentacion
* Ctrl X- v = diff del buffer actual
* Ctrl j - hippie-expand
una gran ayuda a la completion en la realidad y bindeado a un shortcut
comodo, dejando el emmet a su natural Ctrl-Ret.
* M-< ir al comienzo y M-> ir al final
alt-< va al comienzo
alt-Shift-< va al final
me resulta mas comodo que las opciones de meow {b y }b
* M-m en corfu para llevar el menu al minibuffer
muy bueno para cuando hay mucho para buscar y el minibuffer permite
busquedas mas orderless
* v en meow es fascinante
es la busqueda que en evil era / pero en forma mucho mas acertada pq
tiene historial y te muestra lo que hay en el buffer. Mejor no puede haber.
* M-? x-ref en el buffer o en otros bufferes
xref-find-references
te busca en el proyecto.
* vr visualreplace  5
replace visual en region
* Ctrlf
reemplaza a los de fabrica c-s c-r cm-s etc con mucho mas polenta
* git-timemachine
sobre un buffer manejado con git muestra el ultimo snapshot y con n p
vamos adelantando atrasando en el tiempo.
* magit l --file
permite elegir el archivo que queremos y ahi vamos a la verdadera
maquina del tiempo.
* straight-pull-all
para actualizar los paquetes
luego straight-check-all para rebuild the packages que han cambiado.
* M-= cuenta las lineas, palabras y caracteres de una region
* C-h-m muestra el modo major y menor del buffer
* en cambiar buffer (* o Cx-b) ves tambien los Bookmarks
Ves los buffers | files | bookmarks
o bien tipeas el nombre o con Ctrl-up/down vas de bloque en bloque y
alli los tenes a todos.
