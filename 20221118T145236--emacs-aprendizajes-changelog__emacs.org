#+title:      emacs aprendizajes changelog
#+date:       [2022-11-18 Fri 14:52]
#+filetags:   :emacs:
#+identifier: 20221118T145236

** pass
De a poco he estado pasando todo a pass, renegando un monton con las
interfaces de pass a firefox, pero mas o menos andan. La idea es tener
las claves en un solo lugar un poco mas seguras que en el navegador,
pero es un trabajo a largo plazo.
** epa
posibilidad de encryptar archivos o partes directamente en emacs
lo mas directo es un outline tagearlo con :crypt: y listo, queda
encriptado cuando lo cerras automaticamente.
** vterm-multi-vterm
La multi-vterm la saque pq consume muchos segundos de arranque, y
vterm lo uso a diario para tener el flask run adentro.
** hledger
Desde que lo puse no lo deje de usar. Es mucho mas eficiente que el
sistema de terminal.
** ef-themes modus-themes ef-frost!
Los ef-themes al principio me gustaban pero despues me dejaron de
gustar por como distorsionan los tamanos en org-mode. Y los colores se
va de mambo. Ahora estoy usando el modus-theme.
** tramp
genialisimo. Unido a bookmarks que es una brillante herramienta, tengo
el acceso instantaneo a archivos y directorios del host. Sin tener que
poner la clave.
** treemacs
no le veo la utilidad. Uso mejor dired. me gusta mas.
lo dejo pq no usa segundos de arranque.
** vertico-ordeless-corfu-cape-embark etc.
la completion es optima con ese tandem, todo genial.
[2022-11-14 Mon] instale corfu-prescient y vertico-prescient
mientras se esta buscando en ambos Ms es habilitado con opciones.
** mirror git
[2022-10-16 Sun]
abri cuentas en bitbucker e hice mirror en gitlab y alli.
ahora pongo en agenda para hacer mirror una vez a la semana.
Ahora el mirror se hace con ssh y es mas rapido o sea
git push --mirror git...(la direccion git del repositorio)
** hippie-expand
[2022-10-16 Sun]
primero no he logrado bajo ningun concepto alterar el binding. M-/.
segundo me ha servido en muchas ocasiones donde el complete no ha
funcionado y me ha dado la completion pero no una gran cosa.
** straight
[2022-10-20 Thu]
es muy sano y potente, y me permite tener todo bien acomodadito y
lograr un inicio super rapido. Ahora estoy en menos de 1.5seg.
[2022-11-05 Sat] descubro el :defer para bloquear los paquetes que
demoran mucho y que no usamos relevantemente. Estoy en 1.26seg.
** meow
[2022-10-20 Thu]
empece de cero con un .emacs.d nuevo, backupie el anterior y empece a
hacer un init.el nuevo con straight y solo los packages  Tiene
una repuesta mas rapida y un inicio rapidisimo (1.31seg) y la
funcionalidad practicamente es la misma. El undo p.e. anda bien y
puedo usar el de emacs nativo. En realidad evil interfiere mucho con
emacs.  Y meow en si es interesante hay que darle la chance de
aprenderlo.
[2022-10-21 Fri]
cambios que le hice a la configuracion basica:
+ |o| para abrir linea debajo porque la A era muy incomoda.
+ |-| para el cambio de direccion no es muy usado pero es mas rapido
  que el punto y coma.
+ |,| quedo , para inner of y ; para bound of
+ |/| para buscar mucho mas rapido aunque tambien deje a v.
+ |.| para el repeat que ya esta aprendido. Solo queda ver en que
  casos meow lo usa.
+ |+| para borrar linea
+ |D| para duplicar linea
+ |d| para seleccionar linea cambie la x que estaba contramano.
+ |x| para borrar caracter
+ |JKLH| para seleccionar en bloque, util luego de d
+ |t| till casi no le veo diferencia con f pero son ambos muy utiles
  para la tarea rapida de busqueda en el area visible tipo avy.

Ademas aprendi sobre beacon con G y multiples cursores lo cual es
fascinante.
Y tambien para extender seleccion con HLJK. y O para seleccionar los
bloques.
[2022-10-28 Fri] hice un cambio que me parece razonable:
g ir a principio de buffer G ir al final. que son dos teclazos ya
aprendidos.
y pase v a cancelar seleccion pq / queda para la busqueda, y V para
Beacon.
que en cierto sentido se usan menos.
Otro cambio:
S para save-buffer que es un teclazo muy frecuente y me evito la
barra. y de paso usamos las teclas que meow no usa en modo normal.
El tema es ver lo que queda y es eficiente y lo que no se usa cambiarlo.

La idea es prescindir de la tecla SPC y usar todas las teclas que deja
vacante meow-normal y define-key-globales. Veamos si se puede.
Al final termine haciendolo. Ubique todas las cosas importantes dentro
del teclado meow-normal y algunas teclas de funcion:
+ S save
+ M bookmarks
+ T vterm
+ U vundo
+ Z restart emacs
+ + consult-line
+ * consult-buffer
+ | dired
+ "(2) split-horizontal
+ #(3) split-vertical
+ $(4) deadgrep
+ %(5) vreplace
+ F1 work
+ F2 change-themes
+ F3 erc
+ F4 treemacs
+ F6 toggle dark/light themes seteados
+ F7 browser
+ F8 comment
+ F9 diff
  Algunas cosas las saque pq no hacia falta tener atajos.
  Y tengo otras con atajos comunes de emacs como salir que ahora queda
  con Cx-Cc.
+ Cx-Cc salir de emacs
+ Cx-k kill buffer
+ Cx-b igual a * consult-buffer
+ Cx-Cb ibuffer
+ Cx-Cs save de buffer
+ Cx- s save other buffer
+ Cx-Cf find file
+ Cx-g magit status
+ M-U/M-L upper y lower
+ Cx-Cu/Cx-Cl upper/lower region
+ m-t transpose de words
+ c-t transpose de caracter
+ M-y despues de Cy yank-pop
+ C-x h selecciona todo el buffer

  Proyectile:
+ M-p p change-project Y BUSCA EN ESE PROYECTO o sea resuelve el
  problema de tener que ir a un archivo dentro del proyecto y recien
  despues buscar dentro de el.
+ M-p f find-file in project
+ M-p k kill all buffer in project!! muy util
+ M-p j find tag que es lo mismo que M-? o sea busca x-ref
+ M-p v magit
+ M-p o multi-occur en el file
+ M-p r replace en todos los files del project
+ M-p s g grep r ripgrep a ag

  Consult:
+ M-s varios
+ Cx-C-SPC lista de global-mark-ring muy bueno!!!!-->P
+ M-g varios

  Embark
+ C-. actua con un menu sobre la seleccion actual
+ M-. te lleva la definicion del point
+ Ch-b te da todos los keybinds que hay pudiendo buscar por key o por
  function en el mismo lugar. Una masita.

[2022-10-29 Sat]
Estoy tan acostumbrado ya a meow que casi no me encuentro en vim puro,
si bien es cierto que hay algunos teclazos que se sienten bien
directos como el a para ir al final de la linea y el dw o cw que aca
es al reves o sea ws o wc pero al final y al cabo creo que meow es muy
superior en todo. Metido en el ecosistema de emacs.


** irc
[2022-10-22 Sat]
comenzando a explorar con emacs erc
ya registre el nick heroasam con password ataraxia76 y mail
hfj027@gmail.com
a pesar de haberme conectado no he podido ver movimiento o sea que
haya mensajes y algo para ver. Hasta ahora reddit es lo maximo.
** visualreplace ,deadgrep y Ctrlf
[2022-10-22 Sat]
visualreplace es magnifico: lo uso a menudo y permite cambios muy
agiles, eso que el replace de meow es facil pero es todavia un poco
engorroso.
deadgrep es usado todos los dias y tiene la ventaja que te lleva
rapido al archivo debajo y volves a la busqueda.
Ctrlf es tambien muy logrado y lo uso en muchos bufferes donde meow no
llega con la busqueda /.
buenos los tres.
[2022-11-07 Mon] [[denote:20221107T135012][basicos sobre Ctrlf]]
** nano themes y nano modeline
[2022-10-24 Mon]
lindo theme y lindo modeline a pesar de que algunas cosas no se ven
bien en el light. Pero sabes que estan ahi. Tiene todo lo que tiene
doom-modeline.
la modeline es innovadora, me gustaria ver si es hackeable.
Lei el programa y parece tener un monton de cosas pero no se
manifiesta en el uso.
** tema parentheses
    [2022-10-25 Tue]
    smartparens y C-5 que emula el % de vim
    Lo mejor de todo que hace innecesario el C-5 para ir de llave en llave
    es la funcion que creo que es smartparens de que cuando resaltas una
    llave cuya otra-parte no esta a la vista te la muestra y eso es
    genial.
    Pq yo lo uso en conjuncion con meow-block (O) en javascript y es
    genial para ver que todo el script esta sano.
    [2022-10-30 Sun]
    descubro una nueva funcion tipo vim-surround con smartparens
    pero hay que mesclar insert-mode  de meow y region-emacs
    por ejemplo: "escribo una parte que tengo que enclosar"
    sin salir de insert-mode, Ctrl-Space para empezar region y alt-b para
    ir atras por palabra o {[alt-f para ir adelante cuando termino la region
    ahi nomas inserto el enclose, que puede ser comillas parentesis o
    llave lo que quiera.]}
    Lamentablemente no puedo volver a replicar la funcion.
    La funcion que realmente necesito la da rainbow. Y show-paren, y
    electric-pair te da los dos parentesis.

** lsp-bridge
[2022-10-25 Tue]
asombrosamente rapido. Pero veremos el delay que imprime al escribir.
Lamentablemente es inaceptable el delay. Y tambien la falta de
integracion con pyenv.(aunque no se si eglot la cumple, parece que
si.)
Pero dejo todo ahi para echarle un ojo de vez en cuando.
** undo-fu undo-fu-session
es compatible con vundo y vainilla-emacs y meow
[2022-10-26 Wed]
muy bueno. tiene como dije total compatibilidad.
y no es molesto como undo-tree con el guardado de los archivos.
** eww
[2022-10-26 Wed]
buen desempeno del browser basico para algunas cuestiones.
bindie a F7 el browser y arregle bind internos para que pueda navegar
con jklh.
[2022-11-12 Sat] setie init.el para que todo link en emacs se abra en
eww y tener en cuenta que & abre la pagina en navegador externo.
** sql-mysql
[2022-10-27 Thu]
hay que acordarse que cuando se trabaja con consultas que
eventualmente hay que copiar y pegar, etc. se puede obtener un buffer
en emacs de mysql. el comando es sql-mysql
se puede automatizar mas pero no creo que sea necesario pq no lo uso tanto.
** proced
[2022-10-28 Fri] linkeado a p te muestra la lista de procesos de la compu.
** translate
[2022-10-28 Fri]
** local-mark ring y global-mark-ring
[2022-10-28 Fri]
C-F8 en global mark-ring-local despues veo si lo cambio.
P (en normal de meow) es el global-mark-ring que te lleva a otros
archivos.
hay que estudiarlas y ver que pasa.
** email notmuch - offlineimap
[2022-10-28 Fri]
    parece que el flujo de trabajo es primero que se bajen todos los
    mensajes al filesystem.
    Luego establecer un daemon para que lo haga automaticamente. Todo eso
    lo hace offlineimap. Despues notmuch hace una base de datos con eso y
    tiene las facilidades de tageo y busqueda.
    Lo que estoy viendo es que ocupa mucho espacio. Esta bien que hfj024
    es la cuenta mas grande.
    logre que funcione notmuch, en busquedas es brutal pero no logre
    todavia enviar mail.
    Y falta ver si puedo agregar cuentas a offineimap.
    hecho- ya estan bajadas.
    Lo que falta es enviar mail. Da error de autenticacion.
    No voy a perder mas tiempo en eso por ahora. Yo nunca envio mail. Ya
    bastante con tener la base de los mails en la compu y tener la forma
    de buscar para entretenerme un rato.
** other-window  meow '
en vez de usar el M-o de ace-window tengo esa rotacion instantanea con
el apostrofe.
** treemacs en org te permite navegar rapidamente en archivos largos
y luego lo cerras con F4
** C-1.2.3.4 etc es como Cu - num
o sea C4 Cx-TAB TAB te indenta a 4 espacios.
** C-i indentar
te indenta la region. Lo probe con python y funciona joya.
** tree-sitter
[2022-10-30 Sun] por ahora no veo diferencia.
** calc
[2022-11-03 Thu] es muy comoda y si la aprendes a usar es mejor que la otra.
** emacs vainilla
[2022-11-05 Sat] probando emacs-vainilla por un rato para ver que
pasa, como es el flujo de trabajo.
No se puede evaluar nada aun si no se trabaja en la realidad, o sea en
un chunk de trabajo realista en la cual las exigencias del momento nos
hagan ver lo que hace falta en el momento.
Termine dejandolo a solo 20 minutos de trabajo real, pq es muy
antiergonomico y a la vez muy lento, pienso que aumento la velocidad
en x10 con meow, o un sistema tipo vim.
[2022-11-06 Sun] probando sin eglot y sin nada usando la completion
dabbrev unicamente que creo que es suficiente para mis propositos de programacion.
** nuevo modal boon
[2022-11-06 Sun] experimento con nuevo modal boon. Todavia menos
intrusivo que meow.
** emacs-puro
[2022-11-10 Thu]
ahora bien porque no estoy presionado por el
apuro, sino tranqui. Y viene bien la experiencia acumulada con Ctrlf
como buscador.
Se echaria de menos por ahora solamente
+ el buscador / que te premuestra resultados
+ el O que te comprueba que la funcion esta completa.
+ las funciones menos usadas de copiar el interior de una expresion
Pero pienso seguir investigando y buscando la forma de encontrar un
flujo de trabajo que me sirva.  Todavia tengo mucha memoria muscular
activada que debo domar. Algo bueno que hice ayer fue poner el
emacs-server para que no se me mezcle vim con emacs. (aunque ahora con
emacs-vainilla no hay problema)
+ pareceria que con Ms-o tengo un occur en el buffer que muestra
  rapido y permite navegar mas rapido que el C-s y es regexp
+ instale expand-region que todos lo tienen como bueno pero no se si
  es muy usable para mi.
+ Estoy pensando en cambiar C-f/b por M-f/b para ver por mi flujo de
  trabajo pienso que seria mejor.
+ Ya tengo C-o para ir atras a los pop-marks locales los globales no
  sirven y estan por defecto en Cx-Cspace.  Y tengo M-n que no estaba
  bindeado a nada para lo mismo que C-n o sea la linea siguiente pero
  es util cuando estas finito en el ciclo de los M-f/b/d y queres
  hacer M-n en vez de cuando estas con C-f/b/d/n.
Repaso general del vainilla-emacs cheat sheet.
| C-q   | quoted-insert                     | inusable   |
| C-w   | kill-region                       | util       |
| C-e   | move-end-of-line                  | muy-util   |
| C-r   | isearch-backward                  | poco-usado |
| C-t   | transpose-chars                   | no-usado   |
| C-y   | yank                              | util       |
| C-u   | universal-argument                | util       |
| C-i   | indent-for-tab-command            | util       |
| C-o   | pop-local-mark-ring               | util       |
| C-p   | previous-line                     | muy-usado  |
| C-a   | move-beginning-of-line            | util       |
| C-s   | isearch-forward                   | util       |
| C-d   | kill-word                         | muy-usado  |
| C-f   | forward-word                      | muy-usado  |
| C-g   | keyboard-quit                     | muy-usado  |
| C-h   | help-quit-or-quick                | util       |
| C-j   | electric-newline-and-maybe-indent | poco-util  |
| C-k   | kill-line                         | muy-usado  |
| C--   |                                   |            |
| C-z   | undo-fu-only-undo                 | no-usado   |
| C-x   | universal                         | muy-usado  |
| C-c   | universal                         | muy-usado  |
| C-v   | scroll-up-command                 | poco-usado |
| C-b   | backward-word                     | muy-usado  |
| C-n   | next-line                         | muy-usado  |
| C-m   |                                   |            |
| C-,   |                                   |            |
| C-.   | embark-act                        | poco-usado |
| C-*   | lsp-bridge-list-diagnostic        | util       |
|-------+-----------------------------------+------------|
| C-S-e | embark-export                     | inusable   |
| C-S-z | undo-fu-only-redo                 | no-usado   |
| C-S-b | consult-buffer-other-window       | inusable   |
|-------+-----------------------------------+------------|
| M-q   | fill-paragraph                    | poco-usado |
| M-w   | kill-ring-save                    | util       |
| M-e   | forward-sentence                  | poco-usado |
| M-r   | vertico-repeat                    | no-usado   |
| M-t   | transpose-words                   | no-usado   |
| M-y   | consult-yank-from-kill-ring       | util       |
| M-u   | upcase-word                       | poco-usado |
| M-i   | tap-to-tab-stop                   | no-usado   |
| M-o   | ace-window                        | muy-usado  |
| M-p   | previous-line                     | muy-usado  |
| M-a   | backward-sentence                 | poco-usado |
| M-s   | universal-search                  | muy-usado  |
| M-d   | delete-char                       | muy-usado  |
| M-f   | forward-char                      | muy-usado  |
| M-g   | consult                           | ??         |
| M-h   |                                   |            |
| M-j   | default-indent-new-line           | no-usado   |
| M-k   | kill-sentence                     | no-usado   |
| M-l   | downcase-word                     | no-usado   |
| M-z   | zap-to-char                       | no-usado   |
| M-x   | execute-extended-command          | muy-usado  |
| M-c   | capitalize-word                   | no-usado   |
| M-v   | scroll-down-command               | poco-usado |
| M-b   | backward-char                     | muy-usado  |
| M-n   | next-line                         | muy-usado  |
| M-m   | back-to-indentation               | no-usado   |
|-------+-----------------------------------+------------|
| C-M-w | append-next-kill                  | no-usado   |
| C-M-e | end-of-defun                      | no-usado   |
| C-M-r | isearch-backward-regexp           | no-usado   |
| C-M-u | backward-up-list                  | no-usado   |
| C-M-o | split-line                        | no-usado   |
| C-M-a | beginning-of-defun                | no-usado   |
| C-M-s | isearch-forward-regexp            | no-usado   |
| C-M-d | duplicate-line                    | muy-usado  |
| C-M-f | forward-sexp                      | no-usado   |
| C-M-h | mark-defun                        | no-usado   |
| C-M-j | default-indent-new-line           | no-usado   |
| C-M-k | kill-sexp                         | no-usado   |
| C-M-l | reposition-window                 | no-usado   |
| C-M-c | exit-recursive-edit               | no-usado   |
| C-M-v | scroll-other-window               | no-usado   |
| C-M-b | backward-sexp                     | no-usado   |
| C-M-n | forward-list                      | no-usado   |
|-------+-----------------------------------+------------|
| f1    | ir a work.org                     | muy-usado  |
| f2    | consult-theme                     | muy-usado  |
| f5    | notmuch                           | util       |
| f6    | toggle-theme                      | muy-usado  |
| f7    | eww                               | util       |
| C-f7  | translate                         | util       |
| M-f7  | eww-bookmarks                     | util       |
| f8    | comment-dwim                      | muy-usado  |
| f9    | agitate-diff-buffer-or-file       | usado      |
| f10   | meow-search                       | muy-usado  |
| C-f10 | meow-mark-word                    | muy-usado  |
| M-f10 | meow-mark-symbol                  | poco-usado |
| f12   | calc                              | util       |
| C-f12 | calendar                          | no-usado   |


| H-s | save-buffer      | muy-usado |
| H-b | consult-buffer   | ?         |
| H-j | jump-to-register | util      |



+ Hyper para agregar mas atajos
+ jump-to-register H-j
+ C--C-d para borrar hacia atras.
+ en realidad el cambio de direccion funciona para todo.
+ S-M-x te da un set reducido de comandos para el major mode que estas
** font input - lambda themes
[2022-11-12 Sat]
** keyfreq
[2022-11-12 Sat]
te muestra un resumen de todos los comandos que ejecutas.
** guru-mode
[2022-11-12 Sat]
esta bueno para obligarse a no usar las arrow-key y demas que no deben
ser usadas para el flujo normal de emacs.
** what-cursor-position
Cu-Cx-=
te muestra la posision del cursor y ademas con el argumento universal
toda la informacion de la face (font usada principalmente lo que nos interesa.)
** reddit en emacs: md4rd
muy bueno, lo unico que tengo que ver como conseguir el token de
refresh que no lo tengo.
** imenu
[2022-11-15 Tue]
muy util para py/css/js/el/ no tanto para web y regular para org.
pero para py p.e. es mejor que buscar incluso que el meow-visit.
** marks
[2022-11-17 Thu]
+ Cx-h mark whole buffer
+ M-h mark paragraph
+ H-r mark-word
+ C-o pop-mark (local) que es Cu-C-<SPC>
+ C-<SPC> C-<SPC> set-mark a la que se puede volver luego
+ C-x C-<SPC> pop-global-mark
+ C-x C-x exchange-point-and-mark
** mastodon
[2022-11-17 Thu]
Mx-mastodon
luego u para actualizar.
** consult-swicht-buffer
[2022-11-17 Thu]
poniendo b f m y <SPC>
busca solo en buffer, files, bookmarks sin tener que ir a C-arrow para
hacer lo mismo.
y solo con <SPC> busca buffers ocultos: "hidden-buffers".
** delete char
[2022-11-18 Fri] delete es diferente a kill. Delete borra sin guardar
en el ring-kill o sea en el reservorio para los yanks.
delete-forward-char bindeado a M-d y por defecto a DEL es el clasico
usado para borrar caracter por caracter hacia delante.  Ahora agregue:
delete-backward-char que esta bindeado naturalmente a la tecla <-- y
lo bindie para no perder el tempo a M-s-d.  Lo interesante de ambos
comandos es que si hay una region activa actua sobre la region,
borrando todo, no kill, no permitiendo el yank, pero si el undo.
Cambie el delete-char por delete-forward-char que funciona igual que
delete-backward-char respecto al tema de borrar la region activa.
** pop-yank por numero
cuando hacemos pop-yank los yanks guardados en el ring-kill estan
numerados podemos usar directamente ese numero para hacer un yank
rapido como tuve que hacer el otro dia en todos lados.
C1-Cy o generalmente Cu- n - Cy pero mas facil es entrar directamente
el argumento.
** pulsar
[2022-11-18 Fri]
M-F9 pulsar-highlight-dwim
C-l bindeado a pulsar-recenter-middle
el ultimo me parece interesante.
** view-mode
[2022-11-18 Fri] 119 packages loaded in 0.918364 seconds
C-F9 view-mode
el archivo se muestra con un candadito al lado izquierdo del logo de
tipo de archivo.
Se habilitan los siguentes atajos por default:
| <SPC>  | avanza para abajo               |
| <BACK> | avanza para arriba              |
| <RET>  | avanza para abajo una linea     |
| e      | vuelve a modo normal            |
| s      | buscar(en gral ctrlf anda todo) |
muy interesante modo para "ver" un archivo sin tener que estar
pendiente que tocamos algo.
** narrow-to-region
[2022-11-18 Fri] 119 packages loaded in 0.923642 seconds
| Cx-n-n | s-F9   | narrow-to-region |
| Cx-n-w | C-s-F9 | widen            |

narrow to region es seleccionar una parte del buffer y centrarse en
ella. No se puede acceder a la otra parte del buffer. Pero el guardado
afecta a todo el buffer.
Comandos parecidos en org:
| Cx-n-s | org-narrow-to-subtree |
es interesante pq no necesita crear la region.
** expand-region
[2022-11-19 Sat] 120 packages loaded in 0.939177 seconds
al principio no creia mucho en ese paquete, pero usandolo un poco
pienso que tiene potencial.
| C-=  | expande la region por unidades |
| C-+  | contrae la region por unidades |
| Cc r | accede a un menu               |
El menu es un poco inusable y redundante. Pero esta ahi.
El bindaje natural es comodo y una vez se aprende esta bien. Esta
bueno para lenguajes de programacion donde queremos unidades
sintacticas.
En cambio en org es muy util el M-h para todo el paragraph, y tambien
el H-r para el word y el H-l para la linea ambos con el H--.

Nota: puse :defer 0.1 a pyenv y cia que me estaban costando un monton
de milisegundos y tambien :defer t a mastodon y elmet que no son
relevantes y baje bastante:
120 packages loaded in 0.783033 seconds
** free-keys describe-keymap
[2022-11-19 Sat] 121 packages loaded in 0.792399 seconds
free-keys es un paquete que te muestra los atajos libres en el
major-mode donde lo invocas.
y embark-bindings-in-keymaps o describe-keymaps te lleva a ver todos
los bind que tenes por major-modes
Este ultimo es mejor pq es mas completo y tiene links que te llevan a
la help ida y vuelta.
** interactive highlighting
[2022-11-19 Sat] 121 packages loaded in 0.796076 seconds
comandos faciles para marcar con hightlight en el buffer
| Ms-h r | hightlight regexp                                          |
| Ms-h u | quitar el hightlight                                       |
| Ms-h . | hightlight symbol at point                                 |
| Ms-h l | hightlight regexp dentro de la line                        |
| Ms-h p | hightlight regexp dentro del paragraph                     |
| Ms-h w | escribe los hightlight como comentario para usarse despues |
| Ms-h f | supuestamente se buscaria dentro de ellos...?              |

En cada caso hay auto-completion con menu en el minibuffer.
** hightlight-changes-mode
[2022-11-19 Sat]121 packages loaded in 0.784668 seconds
con el agregado de
(global-highlight-changes-mode t)
(add-hook 'write-file-functions 'highlight-changes-rotate-faces nil t)
tengo el modo activado en todos los modos.
Lo cambiado y/o agregado esta diferenciado.
Estaria bueno un par de atajos pq tiene la funcion de ir next/previous
change
| C-<f8>   | hightlight-changes-next              |
| M-<f8>   | hightlight-changes-previous          |
la remocion la hace por region. Y parece que el next-previous lo hace
por bloque.
tuve que sacar el atajo a hightlight-changes-remove-hightlight pq
freeza emacs. Pero anda desde m-x
