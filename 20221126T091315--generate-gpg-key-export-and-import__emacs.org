#+title:      generate gpg key export and import
#+date:       [2022-11-26 Sat 09:13]
#+filetags:   :emacs:
#+identifier: 20221126T091315


+ Crear una key
 Creating a key To get started you must first
generate the key pair with gpg: $ gpg --gen-key Follow the prompts to
generate your key. I highly recommend you pick a pass phrase!  You can
verify it is loaded into your system’s keychain by running: M-x
epa-list-secret-keys in Emacs; or gpg --list-secret-keys on your
command line [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources
Mastering Emacs]]

+ Exportar e importar key
   Next, export the secret key to a file mykey.asc
to gpg (using the key holder’s name, email or key ID):

$ gpg --armor --export-secret-keys herodoto asam > hasamkey.asc

You can now, on a different machine, re-import the key, but you will
also have to trust it again. You can pass the full name in quotes or
the e-mail to gpg and it will pick the right one. Here I edit a key
based on the full name of the key holder and GPG is smart enough to
figure out which one it is:

$ gpg --import mykey.asc
$ gpg --edit-key "herodoto asam"
gpg> trust
Your decision? 5
Do you really want to set this key to ultimate trust? (y/N) y
gpg> quit

At this point you have a key and a way of exporting and re-importing
it between computers; useful, if you use more than one, but
optional. It goes without saying that if you lose your key you lose
your encrypted data!  [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and AuthSources - Mastering Emacs]]
